print("exit");
alias phy_sp S0;
alias curr_pid S1;
alias syscall_no S2;
alias new_pcb S3;
alias i S4;
alias j S5;
alias curr_pcb S6;
alias sw_index S7;
alias newphy_sp S9;
curr_pid=(PTBR-1024)/8;
phy_sp=[PTBR+2*(SP/512)]*512+SP%512;
syscall_no=[phy_sp-1];
if(syscall_no==10)then
	i=READY_LIST;///all waits resumed
        while(i<5*512)do
                if([i+1]==100+curr_pid)then
                        [i+1]=1;
                endif;
                i=i+32;
        endwhile;
	curr_pcb=READY_LIST+32*curr_pid;/////check for ready process
	i=curr_pcb+32;
	while(i<5*512&&[i+1]!=1)do
		i=i+32;
	endwhile;
	if(i>=5*512)then
		j=3*512;
		while(j<curr_pcb&&[j+1]!=1)do
			j=j+32;
		endwhile;
		if(j==curr_pcb)then////no ready process
			print("halt");
			halt;
		else
			new_pcb=j;
		endif;
	else
		new_pcb=i;
	endif;
	[READY_LIST+32*curr_pid+1]=0;////set state =0 ie terminated	
	i=READY_LIST+32*curr_pid+15;////dealing with ppoft
	while(i<READY_LIST+32*curr_pid+31)do
		if([i]!=-1)then
			sw_index=[i];
			j=1024+256+64+(sw_index*2);
			[j+1]=[j+1]-1;
			if([j+1]==0)then
				[j]=-1;
				[j+1]=0;
			endif;
			[i]=-1;
			[i+1]=-1;
		endif;
		i=i+2;
	endwhile;
	load(6,20);
	i=PTBR;
	while(i<PTBR+8)do
		if([i+1]=="01"||[i+1]=="11")then
			j=[i];//mem free list decrement
			[MEM_LIST+j]=[MEM_LIST+j]-1;
			[i]=-1;
			[i+1]="00";
		endif;
		if([i+1]=="00"&&[i]>447)then
			j=[i];
			[DISK_LIST+j]=[DISK_LIST+j]-1;
			[i]=-1;
			[i+1]="00";
		else
			[i]=-1;
			[i+1]="00";
		endif;
		i=i+2;
	endwhile;
	store(6,20);
	i=25*512+8*4*curr_pid;
        while(i<25*512+8*4*curr_pid+32)do
                [i]=-1;
                [i+1]=-1;
                [i+2]=-1;
                [i+3]=-1;
                i=i+4;
        endwhile;
endif;
if(syscall_no==13)then
	i=[phy_sp-3];///pid to wait for
	curr_pcb=READY_LIST+32*curr_pid;
	j=[READY_LIST+32*i+1];///wait pid's state
	if(j==0||j==2)then
		[phy_sp-2]=-1;
		ireturn;
	endif;
	if(i<0||i>=32)then
		[phy_sp-2]=-2;
		ireturn;
	endif;
	/////////schecduling the curr proc
	[curr_pcb+1]=100+i;///state
	[curr_pcb+2]=BP;
	[curr_pcb+3]=SP-1;
	[curr_pcb+4]=[phy_sp];
	[curr_pcb+5]=PTBR;
	[curr_pcb+6]=PTLR;
	[curr_pcb+7]=R0;
	[curr_pcb+8]=R1;
	[curr_pcb+9]=R2;
	[curr_pcb+10]=R3;
	[curr_pcb+11]=R4;
	[curr_pcb+12]=R5;
	[curr_pcb+13]=R6;
	[curr_pcb+14]=R7;
	i=curr_pcb+32;////round robin to find new proc
	while(i<5*512&&[i+1]!=1)do
		i=i+32;
	endwhile;
	if(i>=5*512)then
                j=3*512;
                while(j<curr_pcb&&[j+1]!=1)do
                        j=j+32;
                endwhile;
                if(j==curr_pcb)then////no ready process
                        [phy_sp-2]=-3;
			ireturn;
                else
                        new_pcb=j;
                endif;
        else
                new_pcb=i;
        endif;
	i=25*512+8*4*curr_pid;
endif;
if(syscall_no==10||syscall_no==13)then
	print("schrduling");
	[new_pcb+1]=2;//scheculing new proc
        BP=[new_pcb+2];//////load all scheduled stuff into processor
        SP=[new_pcb+3];
        PTBR=[new_pcb+5];
        PTLR=[new_pcb+6];
        R0=[new_pcb+7];
        R1=[new_pcb+8];
        R2=[new_pcb+9];
        R3=[new_pcb+10];
        R4=[new_pcb+11];
        R5=[new_pcb+12];
        R6=[new_pcb+13];
        R7=[new_pcb+14];
        SP=SP+1;///to store prev IP on top of stack to start exec(thats how i ret works ) this is the new sp
        newphy_sp=([PTBR+2*(SP/512)]*512)+(SP%512);//after new sp is loaded 
        [newphy_sp] = [new_pcb+4];//////all this shinnanigans sice you cant change ip directly
        [new_pcb+1]=2;
	if(syscall_no==13)then
		[phy_sp-2]=0;
	endif;
	ireturn;
endif;
