alias phy_sp S0;
alias curr_pid S1;
alias syscall_no S2;
alias file_name S3;
alias i S4;
alias fat_entry S5;
alias count S6;
alias count1 S7;
alias j S8;
alias x S9;
alias sw_index S10;
curr_pid=(PTBR-1024)/8;
phy_sp=[PTBR+2*(SP/512)]*512+SP%512;
syscall_no=[phy_sp-1];
if(syscall_no==9)then
	file_name=[phy_sp-3];
	load(5,19);
	i=5*512;//FAT
	while(i<6*512&&[i]!=file_name)do
		i=i+8;
	endwhile;
	if([i]==file_name)then
		fat_entry=(i-FAT)/8;
	else
		[phy_sp-2]=-1;
		ireturn;
	endif;
	if([i+1]>3*512)then////size more thean 3 pages
		[phy_sp-2]=-2;
		ireturn;
	endif;
	count=[i+1]/512;//no of data blocks
	j=PTBR;
	count1=0;//no of pages in curr proc(ignoring stack)
	while(j<PTBR+6)do
		if([j+1]=="01"||[j+1]=="11")then
			count1=count1+1;
		endif;
		j=j+2;
	endwhile;
	if(count1>count)then////deallocating pages
		j=count1-count;
		i=PTBR+4;
		while(i<=PTBR&&[i+1]=="00")do//finding last valid page(from the end)
			i=i-2;
		endwhile;
		while(j!=0)do
			[i+1]="00";
			x=[i];
			[MEM_LIST+x]=0;
			i=i-2;
			j=j-1;
		endwhile;
	endif;
	if(count1<count)then/////allocating pages
		j=count-count1;
		i=MEM_LIST+25;
		count=0;
		while(i<MEM_LIST+64&&count<j)do///enough pages check
			if([i]==0)then
				count=count+1;
			endif;
			i=i+1;
		endwhile;
		if(count<j)then///not enough pages in mem
			[phy_sp-2]=-3;
			ireturn;
		endif;
		while(j!=0)do
			i=PTBR;
			while(i<PTBR+6&&[i+1]!="00")do
				i=i+2;
			endwhile;
			if([i+1]=="00")then
				x=MEM_LIST+25;
				while(x<MEM_LIST+64&&[x]!=0)do
					x=x+1;
				endwhile;
				[x]=1;///updating mem free list
				[i]=x-MEM_LIST;
				[i+1]="01";
			endif;
			j=j-1;
		endwhile;
	endif;
	load(1,[FAT+8*fat_entry+2]);///copy into pages from hdd
	i=512;
	while(i<1024&&[i]!=-1)do
		count=0;
		load(1,[i]);
		x=PTBR;
		while(count<512)do
			j=[x];
			[j*512+count]=[512+count];
			count=count+1;
			
		endwhile;
		load(1,[FAT+8*fat_entry+2]);
		x=x+2;
		i=i+1;
	endwhile;
	i=READY_LIST+32*curr_pid+15;////dealing with ppoft
	while(i<READY_LIST+32*curr_pid+31)do
		if([i]!=-1)then
			sw_index=[i];
			j=1024+256+64+(sw_index*2);
			[j+1]=[j+1]-1;
			if([j+1]==0)then
				[j]=-1;
				[j+1]=0;
			endif;
			[i]=-1;
			[i+1]=-1;
		endif;
		i=i+2;
	endwhile;
	SP=3*512;
	phy_sp=[PTBR+2*(SP/512)]*512+SP%512;
	[phy_sp]=0;///IP
	ireturn;
endif;	
if(syscall_no==11)then
	curr_pid=(PTBR-1024)/8;
	[phy_sp-2]=curr_pid;
	ireturn;
endif;
if(syscall_no==12)then
	i=READY_LIST+32*curr_pid+31;
	[phy_sp-2]=[i];
	ireturn;
endif;
