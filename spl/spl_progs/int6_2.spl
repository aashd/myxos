alias phy_sp S0;
alias curr_pid S1;
alias syscall_no S2;
alias file_name S3;
alias i S4;
alias fat_entry S5;
alias count S6;
alias count1 S7;
alias j S8;
alias x S9;
alias sw_index S10;
curr_pid=(PTBR-1024)/8;
phy_sp=[PTBR+2*(SP/512)]*512+SP%512;
syscall_no=[phy_sp-1];
if(syscall_no==9)then
	file_name=[phy_sp-3];
	load(5,19);
	i=5*512;//FAT
	while(i<6*512&&[i]!=file_name)do
		i=i+8;
	endwhile;
	if([i]==file_name)then
		fat_entry=(i-FAT)/8;
	else
		[phy_sp-2]=-1;
		ireturn;
	endif;
	if([i+1]>3*512)then////size more thean 3 pages
		[phy_sp-2]=-2;
		ireturn;
	endif;
	load(6,20);
	j=PTBR;
	while(j<PTBR+6)do///generating new per proc pg tablr
		if([j+1]=="01"||[j+1]=="11")then
			count=[j];
			[MEM_LIST+count]=[MEM_LIST+count]-1;
		endif;
		if([j+1]=="00"&&[j]>447)then
			count=[j];
			[DISK_LIST+count]=[DISK_LIST+count]-1;
		endif;
		j=j+2;
	endwhile;
	store(6,20);
	load(1,[FAT+8*fat_entry+2]);//load basic block
	i=512;
	j=PTBR;
	while([i]!=-1&&i<1024)do//size wont be  greater than 3*512
		[j]=[i];
		[j+1]="00";
		j=j+2;
		i=i+1;
	endwhile;
	/////////////////////////////////////////////////////////////////////////////
	i=READY_LIST+32*curr_pid+15;////dealing with ppoft
	while(i<READY_LIST+32*curr_pid+31)do
		if([i]!=-1)then
			sw_index=[i];
			j=1024+256+64+(sw_index*2);
			[j+1]=[j+1]-1;
			if([j+1]==0)then
				[j]=-1;
				[j+1]=0;
			endif;
			[i]=-1;
			[i+1]=-1;
		endif;
		i=i+2;
	endwhile;
	SP=3*512;
	phy_sp=[PTBR+2*(SP/512)]*512+SP%512;
	[phy_sp]=0;///IP
	ireturn;
endif;	
if(syscall_no==11)then
	curr_pid=(PTBR-1024)/8;
	[phy_sp-2]=curr_pid;
	ireturn;
endif;
if(syscall_no==12)then
	i=READY_LIST+32*curr_pid+31;
	[phy_sp-2]=[i];
	ireturn;
endif;
