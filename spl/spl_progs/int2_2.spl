alias phy_sp S0;
alias syscall_no S1;
alias sem_id S2;
alias i S3;
alias j S4;
alias new_pid S5;
alias curr_pid S6;
alias sem_name S7;
alias ref S8;
alias new_pcb S9;
alias curr_pcb S10;
alias newphy_sp S11;
phy_sp=[PTBR+2*(SP/512)]*512+SP%512;
syscall_no=[phy_sp-1];
sem_name=[phy_sp-3];
curr_pid=(PTBR-1024)/8;
if(syscall_no==2)then
	i=25*512+8*4*curr_pid;
        while(i<25*512+8*4*curr_pid+8*4&&[i]!=sem_name)do
                i=i+4;
        endwhile;
	sem_id=(i-(25*512+8*4*curr_pid))/4;
	if([i+1]==1)then
		[phy_sp-2]="Access grant";
		ireturn;
	endif;
	ref=[25*512+8*4*curr_pid+4*sem_id+2];
	i=25*512;
	j=0;
	while(i<25*512+8*4*32)do
                if([i+2]==ref&&[i]==sem_name)then
                        j=j||[i+1];
			print([i+1]);
			print("loop");
                endif;
		i=i+4;
        endwhile;
        if(j==1)then
                print ("Some one already opened");
               	///////////context switch//roundrobin 
		/////////schecduling the curr proc
	        [curr_pcb+1]=1;///state
	        [curr_pcb+2]=BP;
	        [curr_pcb+3]=SP-4;//////////////////////manual pop off
	        [curr_pcb+4]=[phy_sp]-1;/////////////////////ip-1?
	        [curr_pcb+5]=PTBR;
	        [curr_pcb+6]=PTLR;
	        [curr_pcb+7]=R0;
	        [curr_pcb+8]=R1;
	        [curr_pcb+9]=R2;
	        [curr_pcb+10]=R3;
	        [curr_pcb+11]=R4;
	        [curr_pcb+12]=R5;
	        [curr_pcb+13]=R6;
	        [curr_pcb+14]=R7;
	        i=curr_pcb+32;////round robin to find new proc
	        while(i<5*512&&[i+1]!=1)do
	                i=i+32;
	        endwhile;
	        if(i>=5*512)then
	                j=3*512;
	                while(j<curr_pcb&&[j+1]!=1)do
	                        j=j+32;
	                endwhile;
	                if(j==curr_pcb)then////no ready process
	                        [phy_sp-2]=-3;
	                        ireturn;
	                else
	                        new_pcb=j;
	                endif;
	        else
	                new_pcb=i;
	        endif;
		 [new_pcb+1]=2;//scheculing new proc
	        BP=[new_pcb+2];//////load all scheduled stuff into processor
	        SP=[new_pcb+3];
	        PTBR=[new_pcb+5];
	        PTLR=[new_pcb+6];
	        R0=[new_pcb+7];
	        R1=[new_pcb+8];
	        R2=[new_pcb+9];
	        R3=[new_pcb+10];
	        R4=[new_pcb+11];
	        R5=[new_pcb+12];
	        R6=[new_pcb+13];
	        R7=[new_pcb+14];
	        SP=SP+1;///to store prev IP on top of stack to start exec(thats how i ret works ) this is the new sp
	        newphy_sp=([PTBR+2*(SP/512)]*512)+(SP%512);//after new sp is loaded
	        [newphy_sp] = [new_pcb+4];//////all this shinnanigans sice you cant change ip directly
	        [new_pcb+1]=2;
		[phy_sp-2]=0;
                ireturn;
	else
		print("j is zero");
		print(j);
		[25*512+8*4*curr_pid+4*sem_id+1]=1;///access granted
		[phy_sp-2]=0;
		ireturn;
	endif;	
else
	sem_id=sem_name;
	[25*512+8*4*curr_pid+4*sem_id+1]=0;///closed
	[phy_sp-2]=0;
        ireturn;
endif;









