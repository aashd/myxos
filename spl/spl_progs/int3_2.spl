alias syscall_no S0;
alias phy_sp S1;
alias file_desc S2;
alias i S3;
alias curr_pid S5;
alias p_ppofentry S6;//use this for sw_index and lseek pos
alias fat_entry S7;
alias sw_index S8;
alias lseek_pos S9;
alias bas_block S10;
phy_sp=[PTBR+(SP/512)*2]*512+SP%512;
syscall_no=[phy_sp-1];
file_desc=[phy_sp-4];
if(syscall_no==6)then
	alias newlseek S4;
	newlseek=[phy_sp-3];
	curr_pid=(PTBR-1024)/8;
	i=READY_LIST+32*curr_pid+15+2*file_desc;//3*512
	if(file_desc>=0&&file_desc<8)then//validity of file desc entry
		p_ppofentry=i;//pointer to per proc file open table entry
	else
		[phy_sp-2]=-1;
		ireturn;
	endif;
	sw_index=[p_ppofentry];
	if(sw_index==-1)then//checking validity of swindex ie is the file open at all
		[phy_sp]=-2;
		ireturn;
	else
		fat_entry=[FILE_TABLE+sw_index*2];//1024+256+64
	endif;
	/////////////check validity of newlseek
	load(5,19);
	i=FAT+8*fat_entry+1;////file_size
	if(newlseek>=0&&newlseek<=i)then//the = file size helps extends the file|| seek =filesize =>you are at end of file
		[p_ppofentry+1]=newlseek;
		[phy_sp-2]=0;
		ireturn;
	else
		[phy_sp-2]=-3;
		ireturn;
	endif;
else
	curr_pid=(PTBR-1024)/8;
	i=READY_LIST+32*(curr_pid)+15+file_desc*2;
	if(file_desc>=0&&file_desc<8)then//validity of file desc
		p_ppofentry=i;
		lseek_pos=[i+1];//need not be validated
	else
		[phy_sp-2]=-1;
		ireturn;
	endif;
	sw_index=[p_ppofentry];
	if(sw_index==-1)then
		[phy_sp-2]=-2;
		ireturn;
	else
		fat_entry=[FILE_TABLE+2*sw_index];//1024+256+64
	endif;
	load(5,19);
	bas_block=[FAT+8*fat_entry+2];///basic block
	load(1,bas_block);
	i=[512+lseek_pos/512];///data block where file has to be written
	load(1,i);
	[phy_sp-3]=[512+lseek_pos%512];
	[p_ppofentry+1]=[p_ppofentry+1]+1;
	[phy_sp-2]=0;
	ireturn;
endif;
